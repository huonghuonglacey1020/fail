{"version":3,"sources":["components/PageHeader/index.js","components/FilterBar/index.js","components/RadioButton/index.js","components/TableData/index.js","utils/API.js","components/EmployeeSearch.js","App.js","serviceWorker.js","index.js"],"names":["PageHeader","className","FilterBar","employeeMaleSorted","this","props","employees","filter","employee","gender","map","result","i","key","name","first","last","email","location","country","alt","src","picture","thumbnail","React","Component","SearchForm","htmlFor","onChange","handleInputChange","value","search","type","placeholder","id","onClick","handleFormSubmit","TableData","axios","get","EmployeeSearch","state","results","searchEmployees","query","API","then","res","setState","data","console","log","catch","err","event","target","preventDefault","style","textAlign","RadioButton","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"4OAiCeA,MATf,WACE,OACE,yBAAKC,UAAU,iCACb,oDCzBeC,E,uKAEb,IAAIC,EAAqBC,KAAKC,MAAMC,UAAUC,QAAO,SAAAC,GAAQ,MAAwB,WAApBA,EAASC,UAC1E,OACI,yBAAKR,UAAU,OAEX,2BAAOA,UAAU,uBACb,+BACI,4BAEI,yCACA,qCACA,uCACA,sCACA,yCAIR,+BACKE,EAAmBO,KAAI,SAACC,EAAQC,GAAT,OACpB,wBAAIC,IAAMD,EAAI,aACV,4BAAKD,EAAOG,KAAKC,MAAjB,IAAyBJ,EAAOG,KAAKE,MACrC,4BAAKL,EAAOM,OACZ,4BAAKN,EAAOO,SAASC,SACrB,4BAAKR,EAAOF,QACZ,4BAAI,yBAAKW,IAAKT,EAAOG,KAAMO,IAAKV,EAAOW,QAAQC,wB,GAzBxCC,IAAMC,WCgD9BC,MAtBf,SAAoBrB,GAClB,OACE,8BACE,yBAAKJ,UAAU,cACb,2BAAO0B,QAAQ,UAAf,WACA,2BACEC,SAAUvB,EAAMwB,kBAChBC,MAAOzB,EAAM0B,OACbjB,KAAK,SACLkB,KAAK,OACL/B,UAAU,eACVgC,YAAY,SACZC,GAAG,WAEL,4BAAQC,QAAS9B,EAAM+B,iBAAkBnC,UAAU,wBAAnD,aCrCaoC,G,4KAEb,OACI,6BACI,2BAAOpC,UAAU,6B,GAJMuB,IAAMC,Y,iBCD9B,EACH,WACJ,OAAOa,IAAMC,IAJL,0CCmEKC,E,4MACnBC,MAAO,CACLV,OAAQ,GACRW,QAAS,I,EAOXC,gBAAkB,SAAAC,GAChBC,EAAWD,GACRE,MAAK,SAAAC,GAAG,OAAI,EAAKC,SAAS,CAAEN,QAASK,EAAIE,KAAKP,SAC7CQ,QAAQC,IAAIJ,EAAIE,KAAKP,aACtBU,OAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAIE,O,EAE9BxB,kBAAoB,SAAAyB,GAClB,IAAMxC,EAAOwC,EAAMC,OAAOzC,KACpBgB,EAAQwB,EAAMC,OAAOzB,MAC3B,EAAKkB,SAAL,eACGlC,EAAOgB,K,EAKZM,iBAAmB,SAAAkB,GACjBA,EAAME,iBACN,EAAKb,gBAAgB,EAAKF,MAAMV,S,kEApBhC3B,KAAKuC,gBAAgB,M,+BAwBrB,OACE,6BACE,kBAAC,EAAD,CACAc,MAAQ,CAACC,UAAW,YAEpB,kBAACC,EAAD,CACA5B,OAAQ3B,KAAKqC,MAAMV,OACnBK,iBAAkBhC,KAAKgC,iBACvBP,kBAAmBzB,KAAKyB,kBACxBa,QAAStC,KAAKqC,MAAMC,UAEpB,kBAAC,EAAD,CACEpC,UAAWF,KAAKqC,MAAMC,UAExB,kBAAC,EAAD,CACApC,UAAWF,KAAKqC,MAAMC,e,GA9CclB,IAAMC,WC1DnCmC,MARf,WACE,OACE,6BACJ,kBAAC,EAAD,QCMoBC,QACW,cAA7BC,OAAO5C,SAAS6C,UAEe,UAA7BD,OAAO5C,SAAS6C,UAEhBD,OAAO5C,SAAS6C,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdrB,OAAM,SAAAsB,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.b573cf69.chunk.js","sourcesContent":["// import React from 'react';\n// import '../PageHeader/index.css';\n\n\n// export default class PageHeader extends React.Component {\n\n//     render() {\n//         return (\n//             <div>\n//             <header>\n\n//                 <nav className=\"App-header navbar fixed-top navbar-expand-lg navbar-dark text-center text-light bg-dark\">\n//                     <strong>Employee Directory</strong>\n                    \n//             </nav>\n//         </header>\n//     </div>\n            \n//         )\n//     }\n// }\nimport React from \"react\";\nimport \"./style.css\";\n\nfunction PageHeader() {\n  return (\n    <div className=\"jumbotron text-center bg-info\">\n      <h1>Employee Directory</h1>\n      \n    </div>\n  );\n}\n\nexport default PageHeader;\n\n\n\n\n","import React from 'react';\n\nexport default class FilterBar extends React.Component {\n    render() {\n        var employeeMaleSorted = this.props.employees.filter(employee => employee.gender !== 'female')\n        return (\n            <div className=\"row\">\n                \n                <table className=\"table table-striped\">\n                    <thead>\n                        <tr>\n                            \n                            <th>Full name</th>\n                            <th>Email</th>\n                            <th>Country</th>\n                            <th>Gender</th>\n                            <th>Picture</th>\n                        </tr>\n                    </thead>\n\n                    <tbody>\n                        {employeeMaleSorted.map((result, i) => (\n                            <tr key={ i + '-employee'}>\n                                <td>{result.name.first} {result.name.last}</td>\n                                <td>{result.email}</td>\n                                <td>{result.location.country}</td>\n                                <td>{result.gender}</td>\n                                <td><img alt={result.name} src={result.picture.thumbnail}/></td>\n                            </tr>)\n                        )}</tbody>\n                </table>\n            </div>\n        );\n    }\n}","// import React from 'react';\n\n// export default class RadioButton extends React.Component {\n\n//     render(props) {\n//         return (\n//             <form>\n//       <div className=\"form-group\">\n//         <label htmlFor=\"search\">Search:</label>\n//         <input\n//           onChange={props.handleInputChange}\n//           value={props.search}\n//           name=\"search\"\n//           type=\"text\"\n//           className=\"form-control\"\n//           placeholder=\"Search\"\n//           id=\"search\"\n//         />\n//         <button onClick={props.handleFormSubmit} className=\"btn btn-primary mt-3\">\n//           Search\n//         </button>\n//       </div>\n//     </form>\n//         )\n//     }\n// }\nimport React from \"react\";\n\nfunction SearchForm(props) {\n  return (\n    <form>\n      <div className=\"form-group\">\n        <label htmlFor=\"search\">Search:</label>\n        <input\n          onChange={props.handleInputChange}\n          value={props.search}\n          name=\"search\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Search\"\n          id=\"search\"\n        />\n        <button onClick={props.handleFormSubmit} className=\"btn btn-primary mt-3\">\n          Search\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default SearchForm;","import React from \"react\";\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\n\nexport default class TableData extends React.Component {\n    render() {\n        return (\n            <div>\n                <table className=\"table table-striped\">\n                    {/* <tbody>\n                        {this.props.employees.map((result) => (\n                            <tr key={result.login.username}>\n                                <td>{result.name.first} {result.name.last}</td>\n                                <td>{result.email}</td>\n                                <td>{result.location.city}</td>\n                                <td>{result.location.country}</td>\n                                </tr>)\n                        )}</tbody> */}\n                </table>\n            </div>\n        );\n    }\n}","import axios from 'axios';\n\nconst BASEURL = 'https://randomuser.me/api/?results=20';\n\nexport default {\n    search: function() {\n        return axios.get(BASEURL);\n\n    }\n};\n\n\n","// import React from 'react';\n// import PageHeader from './PageHeader';\n// import FilterBar from './FilterBar';\n// import RadioButton from './RadioButton';\n// import TableData from './TableData';\n// import API from \"../utils/API\";\n// import 'bootstrap/dist/css/bootstrap.css';\n\n// export default class EmployeeSearch extends React.Component {\n//   state ={\n//     search: '',\n//     results: [],\n//     filtered: []\n//   };\n// // When this component mounts, search the API\n//   componentDidMount() {\n//     this.searchEmployees('');\n//   }\n\n//   searchEmployees = query => {\n//     API.search(query)\n//       .then(res => this.setState({ results: res.data.results },\n//         console.log(res.data.results)))\n//       .catch(err => console.log(err));\n//   };\n//   handleInputChange = event => {\n//     const name = event.target.name;\n//     const value = event.target.value;\n//     this.setState({\n//       [name]: value\n//     });\n//   };\n\n//   // When the form is submitted, search the Giphy API for `this.state.search`\n//   handleFormSubmit = event => {\n//     event.preventDefault();\n//     this.searchEmployees(this.state.search)\n//   };\n\n//   render() {\n//     return (\n//       <div>\n//         <PageHeader\n//         style ={{textAlign: \"center\"}}\n//         ></PageHeader>\n//         <RadioButton\n//         search={this.state.search}\n//         handleFormSubmit={this.handleFormSubmit}\n//         handleInputChange={this.handleInputChange}\n//         results={this.state.results}\n//         ></RadioButton>\n//         <TableData\n//           employees={this.state.results}\n//         />\n//         <FilterBar\n//         employees={this.state.results}\n//         />\n//       </div>\n//     )\n//   }\n// }\nimport React from 'react';\nimport PageHeader from './PageHeader';\nimport FilterBar from './FilterBar';\nimport RadioButton from './RadioButton';\nimport TableData from './TableData';\nimport API from \"../utils/API\";\nimport 'bootstrap/dist/css/bootstrap.css';\n\nexport default class EmployeeSearch extends React.Component {\n  state ={\n    search: '',\n    results: []\n  };\n// When this component mounts, search the API\n  componentDidMount() {\n    this.searchEmployees('');\n  }\n\n  searchEmployees = query => {\n    API.search(query)\n      .then(res => this.setState({ results: res.data.results },\n        console.log(res.data.results)))\n      .catch(err => console.log(err));\n  };\n  handleInputChange = event => {\n    const name = event.target.name;\n    const value = event.target.value;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  // When the form is submitted, search the Giphy API for `this.state.search`\n  handleFormSubmit = event => {\n    event.preventDefault();\n    this.searchEmployees(this.state.search)\n  };\n\n  render() {\n    return (\n      <div>\n        <PageHeader\n        style ={{textAlign: \"center\"}}\n        ></PageHeader>\n        <RadioButton\n        search={this.state.search}\n        handleFormSubmit={this.handleFormSubmit}\n        handleInputChange={this.handleInputChange}\n        results={this.state.results}\n        ></RadioButton>\n        <TableData\n          employees={this.state.results}\n        />\n        <FilterBar\n        employees={this.state.results}\n        />\n      </div>\n    )\n  }\n}","import React from 'react';\nimport EmployeeSearch from './components/EmployeeSearch'\n\nfunction App() {\n  return (\n    <div>\n<EmployeeSearch></EmployeeSearch>\n   </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root')\n \n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}